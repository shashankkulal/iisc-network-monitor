import mysql.connector
import os
import time
import rrdtool
import subprocess
import re
import sys
import functions
import pinggraph
import tree
import settings


#Create Database
def create_database(dbname):
	rrdtool.create("database/" + dbname + ".rrd",
	"--step","300",
	"--start","0",
	"DS:pmin:GAUGE:600:U:U",
	"DS:pmax:GAUGE:600:U:U",
	"DS:pavg:GAUGE:600:U:U",
	"DS:plos:GAUGE:600:0:100",
	"RRA:AVERAGE:0.5:1:10080",
	"RRA:AVERAGE:0.5:5:8934",
	"RRA:AVERAGE:0.5:60:8784",
	"RRA:AVERAGE:0.5:1440:3660"	
	)
	
def update_database(host):
	output = subprocess.check_output("ping " + host + " -c 1 -q  | egrep \"packet loss|rtt\"", shell=True)

	match = re.search('([\d]*\.[\d]*)/([\d]*\.[\d]*)/([\d]*\.[\d]*)/([\d]*\.[\d]*)', output)
	try:
		ping_min = str(match.group(1))
		ping_avg = str(match.group(2))
		ping_max = str(match.group(3))
	except:
		ping_min = "100"
		ping_avg = "100"
		ping_max = "100"

	match = re.search('(\d*)% packet loss', output)
	pkt_loss = float(match.group(1))
	host = "database/%s.rrd" % host
	rrdtool.update(host, "N:%s:%s:%s:%s" % (ping_min, ping_avg, ping_max, pkt_loss))
	

def graph_for_ping(host,c):
	c = str(c)
	image = "images/ping_statistics_%s.png" % host
	host = "database/%s.rrd" % host
	rrdtool.graph(image,"-a", "PNG", "--title", "Ping Statistics","--vertical-label", "Time", "--watermark", "date",
	"DEF:pmi="+host+":pmin:AVERAGE",
	"AREA:pmi"+c+":Min",
	"DEF:pav="+host+":pavg:AVERAGE",
	"AREA:pav"+c+":Avg",
	"DEF:pmx="+host+":pmax:AVERAGE",
	"AREA:pmx"+c+":Max")


#Ping Every 1 Minute and create database if not exist.
def check_database():
	cnx = mysql.connector.connect(user='root', password='dese', host='localhost', database='iisc')
	cursor = cnx.cursor()
	cursor.execute("select ip from host")
	for ip in cursor:
		if ip:
			if not os.path.exists('database/' + str(ip[0]) + ".rrd"):
				create_database(str(ip[0]))
		else:
			pass
	cursor.close()
	cnx.close()


def do_ping(color):
	check_database()
	cnx = mysql.connector.connect(user='root', password='dese', host='localhost', database='iisc')
	cursor = cnx.cursor()
	cursor.execute("select ip from host")
	for ip in cursor:
		if ip:
			update_database(str(ip[0]))
			graph_for_ping(str(ip[0]),color)
		else:
			pass			
	cursor.close()
	cnx.close()
print """
|_ _|_ _/ ___|  ___  | \ | | ___| |___      _____  _ __| | __
 | | | |\___ \ / __| |  \| |/ _ \ __\ \ /\ / / _ \| '__| |/ /
 | | | | ___) | (__  | |\  |  __/ |_ \ V  V / (_) | |  |   < 
|___|___|____/ \___| |_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\
	                                                     
 __  __             _ _             
|  \/  | ___  _ __ (_) |_ ___  _ __ 
| |\/| |/ _ \| '_ \| | __/ _ \| '__|
| |  | | (_) | | | | | || (_) | | Version: 0.2  
|_|  |_|\___/|_| |_|_|\__\___/|_| By: Shashank Suresh Kulal
"""
i = 1
while True:
	color = settings.get_color()
	do_ping(color)
	sys.stdout.write("Ping done %s times.\r" % str(i))
	sys.stdout.flush()
	i += 1
	functions.internet_bandwidth()
	functions.internet_bandwidth_graph()
	pinggraph.get_host()
	tree.do_ping()
	time.sleep(60)









